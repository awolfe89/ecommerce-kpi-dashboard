// src/components/AIReportGenerator.js
import React, { useState } from 'react';
import aiReportService from '../services/aiReportService';

const AIReportGenerator = ({ 
  selectedWebsite, 
  websiteName, 
  selectedYear, 
  currentMonthData, 
  previousMonthData, 
  previousYearData, 
  yearlyData 
}) => {
  const [loading, setLoading] = useState(false);
  const [report, setReport] = useState(null);
  const [error, setError] = useState(null);

  const generateReport = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Get the current month (or the last month with data)
      const currentDate = new Date();
      const currentMonth = currentMonthData 
        ? currentMonthData.month 
        : currentDate.getMonth() + 1;
      
      // Prepare the data context for the AI
      const dataContext = {
        website: {
          id: selectedWebsite,
          name: websiteName
        },
        time: {
          year: selectedYear,
          month: currentMonth,
          currentMonthName: getMonthName(currentMonth)
        },
        metrics: {
          currentMonth: currentMonthData || null,
          previousMonth: previousMonthData || null,
          sameMonthLastYear: previousYearData.find(item => item.month === currentMonth) || null,
          allMonthsThisYear: yearlyData || [],
        }
      };
      
      // Call the AI service to generate the report
      const generatedReport = await aiReportService.generateMonthlyReport(dataContext);
      
      setReport(generatedReport);
    } catch (err) {
      console.error('Error generating AI report:', err);
      setError('Failed to generate the report. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  // Helper function to get month name
  const getMonthName = (monthNum) => {
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                        'July', 'August', 'September', 'October', 'November', 'December'];
    return monthNames[monthNum - 1];
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-6">
      <div className="flex flex-wrap items-center justify-between mb-4">
        <h2 className="text-lg font-medium text-gray-800 dark:text-white">
          AI Performance Insights
        </h2>
        
        <button
          onClick={generateReport}
          disabled={loading}
          className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-gray-400"
        >
          {loading ? 'Generating...' : 'Generate AI Report'}
        </button>
      </div>
      
      {error && (
        <div className="bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200 p-4 rounded-md mb-4">
          {error}
        </div>
      )}
      
      {report && (
        <div className="prose dark:prose-invert max-w-none">
          <h3 className="text-xl font-semibold mb-2">
            {report.title || `${websiteName} - ${getMonthName(report.month)} ${selectedYear} Report`}
          </h3>
          
          <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-md mb-4">
            <h4 className="font-medium mb-2">Executive Summary</h4>
            <p>{report.summary}</p>
          </div>
          
          {report.sections.map((section, index) => (
            <div key={index} className="mb-4">
              <h4 className="font-medium mb-2">{section.title}</h4>
              <p>{section.content}</p>
            </div>
          ))}
          
          {report.recommendations && (
            <div className="bg-blue-50 dark:bg-blue-900 p-4 rounded-md text-blue-800 dark:text-blue-200">
              <h4 className="font-medium mb-2">Recommendations</h4>
              <ul className="list-disc list-inside">
                {report.recommendations.map((rec, index) => (
                  <li key={index}>{rec}</li>
                ))}
              </ul>
            </div>
          )}
          
          <div className="text-xs text-gray-500 dark:text-gray-400 mt-4">
            Report generated by AI at {new Date(report.generatedAt).toLocaleString()}
          </div>
        </div>
      )}
    </div>
  );
};

export default AIReportGenerator;